// <auto-generated />
using System;
using LMS.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LMS.App.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240125154334_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LMS.Entities.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LMS.Entities.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"), 1L, 1);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("LMS.Entities.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<string>("Baski")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CarrierTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CopyRightDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dolap")
                        .HasColumnType("int");

                    b.Property<string>("Fiziksel_Nitelik")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormatId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN_No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Konular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kopya")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Oda")
                        .HasColumnType("int");

                    b.Property<int>("Raf")
                        .HasColumnType("int");

                    b.Property<string>("Resim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sorumlular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Yayin_Tarihi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Yayin_Yeri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Yayinlayan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Yayın_Gelis_Tarihi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isLoss")
                        .HasColumnType("bit");

                    b.HasKey("BookId");

                    b.HasIndex("CarrierTypeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("FormatId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LMS.Entities.Models.BookAuthor", b =>
                {
                    b.Property<int>("BookAuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookAuthorId"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("BookAuthorId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("LMS.Entities.Models.BookingOffice", b =>
                {
                    b.Property<int>("BookingOfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingOfficeId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookingOfficeId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("BookingOffices");
                });

            modelBuilder.Entity("LMS.Entities.Models.CarrierType", b =>
                {
                    b.Property<int>("CarrierTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarrierTypeId"), 1L, 1);

                    b.Property<string>("CarrierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("int");

                    b.HasKey("CarrierTypeId");

                    b.HasIndex("MediaTypeId");

                    b.ToTable("CarrierTypes");

                    b.HasData(
                        new
                        {
                            CarrierTypeId = 1,
                            CarrierName = "Ses Kartuşu",
                            MediaTypeId = 1
                        },
                        new
                        {
                            CarrierTypeId = 2,
                            CarrierName = "Ses Kemeri",
                            MediaTypeId = 1
                        },
                        new
                        {
                            CarrierTypeId = 3,
                            CarrierName = "Ses Silindiri",
                            MediaTypeId = 1
                        },
                        new
                        {
                            CarrierTypeId = 4,
                            CarrierName = "Ses Diski",
                            MediaTypeId = 1
                        },
                        new
                        {
                            CarrierTypeId = 5,
                            CarrierName = "Film Müziği Makarası",
                            MediaTypeId = 1
                        },
                        new
                        {
                            CarrierTypeId = 6,
                            CarrierName = "Ses Rulosu",
                            MediaTypeId = 1
                        },
                        new
                        {
                            CarrierTypeId = 7,
                            CarrierName = "Ses Tel Makarası",
                            MediaTypeId = 1
                        },
                        new
                        {
                            CarrierTypeId = 8,
                            CarrierName = "Ses Kaseti",
                            MediaTypeId = 1
                        },
                        new
                        {
                            CarrierTypeId = 9,
                            CarrierName = "Ses Bandı Makarası",
                            MediaTypeId = 1
                        },
                        new
                        {
                            CarrierTypeId = 10,
                            CarrierName = "Diğer",
                            MediaTypeId = 1
                        },
                        new
                        {
                            CarrierTypeId = 12,
                            CarrierName = "Bilgisayar Kartı",
                            MediaTypeId = 2
                        },
                        new
                        {
                            CarrierTypeId = 13,
                            CarrierName = "Bilgisayar Çip Kartuşu",
                            MediaTypeId = 2
                        },
                        new
                        {
                            CarrierTypeId = 14,
                            CarrierName = "Bilgisayar Diski",
                            MediaTypeId = 2
                        },
                        new
                        {
                            CarrierTypeId = 15,
                            CarrierName = "Bilgisayar Disk Kartuşu",
                            MediaTypeId = 2
                        },
                        new
                        {
                            CarrierTypeId = 16,
                            CarrierName = "Bilgisayar Bant Kartuşu",
                            MediaTypeId = 2
                        },
                        new
                        {
                            CarrierTypeId = 17,
                            CarrierName = "Bilgisayar Kaseti",
                            MediaTypeId = 2
                        },
                        new
                        {
                            CarrierTypeId = 18,
                            CarrierName = "Bilgisayar Bant Makarası",
                            MediaTypeId = 2
                        },
                        new
                        {
                            CarrierTypeId = 19,
                            CarrierName = "Çevrimiçi Kaynak",
                            MediaTypeId = 2
                        },
                        new
                        {
                            CarrierTypeId = 20,
                            CarrierName = "Diğer",
                            MediaTypeId = 2
                        },
                        new
                        {
                            CarrierTypeId = 21,
                            CarrierName = "Diyafram Kartı",
                            MediaTypeId = 3
                        },
                        new
                        {
                            CarrierTypeId = 22,
                            CarrierName = "Mikrofiş",
                            MediaTypeId = 3
                        },
                        new
                        {
                            CarrierTypeId = 23,
                            CarrierName = "Mikrofiş Kaseti",
                            MediaTypeId = 3
                        },
                        new
                        {
                            CarrierTypeId = 24,
                            CarrierName = "Mikrofilm Makarası",
                            MediaTypeId = 3
                        },
                        new
                        {
                            CarrierTypeId = 25,
                            CarrierName = "Mikrofilm Kartuşu",
                            MediaTypeId = 3
                        },
                        new
                        {
                            CarrierTypeId = 26,
                            CarrierName = "Mikrofilm Kaseti",
                            MediaTypeId = 3
                        },
                        new
                        {
                            CarrierTypeId = 27,
                            CarrierName = "Mikrofilm Rulosu",
                            MediaTypeId = 3
                        },
                        new
                        {
                            CarrierTypeId = 28,
                            CarrierName = "Mikrofilm Kayması",
                            MediaTypeId = 3
                        },
                        new
                        {
                            CarrierTypeId = 29,
                            CarrierName = "Mikroopak",
                            MediaTypeId = 3
                        },
                        new
                        {
                            CarrierTypeId = 30,
                            CarrierName = "Diğer",
                            MediaTypeId = 3
                        },
                        new
                        {
                            CarrierTypeId = 31,
                            CarrierName = "Mikroskop Lamı",
                            MediaTypeId = 4
                        },
                        new
                        {
                            CarrierTypeId = 32,
                            CarrierName = "Diğer",
                            MediaTypeId = 4
                        },
                        new
                        {
                            CarrierTypeId = 33,
                            CarrierName = "Film Kartuşu",
                            MediaTypeId = 5
                        },
                        new
                        {
                            CarrierTypeId = 34,
                            CarrierName = "Film Kaseti",
                            MediaTypeId = 5
                        },
                        new
                        {
                            CarrierTypeId = 35,
                            CarrierName = "Film Makarası",
                            MediaTypeId = 5
                        },
                        new
                        {
                            CarrierTypeId = 36,
                            CarrierName = "Film Rulosu",
                            MediaTypeId = 5
                        },
                        new
                        {
                            CarrierTypeId = 37,
                            CarrierName = "Film Şeridi",
                            MediaTypeId = 5
                        },
                        new
                        {
                            CarrierTypeId = 38,
                            CarrierName = "Film Şeridi Kartuşu",
                            MediaTypeId = 5
                        },
                        new
                        {
                            CarrierTypeId = 39,
                            CarrierName = "Üst Şeffaflık",
                            MediaTypeId = 5
                        },
                        new
                        {
                            CarrierTypeId = 40,
                            CarrierName = "Slayt",
                            MediaTypeId = 5
                        },
                        new
                        {
                            CarrierTypeId = 41,
                            CarrierName = "Diğer",
                            MediaTypeId = 5
                        },
                        new
                        {
                            CarrierTypeId = 42,
                            CarrierName = "Stereogram Kartları",
                            MediaTypeId = 6
                        },
                        new
                        {
                            CarrierTypeId = 43,
                            CarrierName = "Stereograf Diski",
                            MediaTypeId = 6
                        },
                        new
                        {
                            CarrierTypeId = 44,
                            CarrierName = "Diğer",
                            MediaTypeId = 6
                        },
                        new
                        {
                            CarrierTypeId = 45,
                            CarrierName = "Kart",
                            MediaTypeId = 7
                        },
                        new
                        {
                            CarrierTypeId = 46,
                            CarrierName = "Sunumlarda Kullanılan Büyük Yazı Kağıtları ve Tahtaları",
                            MediaTypeId = 7
                        },
                        new
                        {
                            CarrierTypeId = 47,
                            CarrierName = "Rulo",
                            MediaTypeId = 7
                        },
                        new
                        {
                            CarrierTypeId = 48,
                            CarrierName = "Çarşaf",
                            MediaTypeId = 7
                        },
                        new
                        {
                            CarrierTypeId = 49,
                            CarrierName = "Hacim",
                            MediaTypeId = 7
                        },
                        new
                        {
                            CarrierTypeId = 50,
                            CarrierName = "Nesne",
                            MediaTypeId = 7
                        },
                        new
                        {
                            CarrierTypeId = 51,
                            CarrierName = "Diğer",
                            MediaTypeId = 7
                        },
                        new
                        {
                            CarrierTypeId = 52,
                            CarrierName = "Video Kartuşu",
                            MediaTypeId = 8
                        },
                        new
                        {
                            CarrierTypeId = 53,
                            CarrierName = "Video Kaseti",
                            MediaTypeId = 8
                        },
                        new
                        {
                            CarrierTypeId = 54,
                            CarrierName = "Video Diski",
                            MediaTypeId = 8
                        },
                        new
                        {
                            CarrierTypeId = 55,
                            CarrierName = "Video Kaset Makarası",
                            MediaTypeId = 8
                        },
                        new
                        {
                            CarrierTypeId = 56,
                            CarrierName = "Diğer",
                            MediaTypeId = 8
                        },
                        new
                        {
                            CarrierTypeId = 57,
                            CarrierName = "Belirtilmemiş",
                            MediaTypeId = 9
                        });
                });

            modelBuilder.Entity("LMS.Entities.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Roman"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Mühendislik"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Bilgisayar"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Şiir"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Öykü"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Ders Kitabı"
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "Tarih"
                        },
                        new
                        {
                            CategoryId = 8,
                            CategoryName = "Mimari"
                        },
                        new
                        {
                            CategoryId = 9,
                            CategoryName = "Bilim"
                        },
                        new
                        {
                            CategoryId = 10,
                            CategoryName = "Deneme"
                        },
                        new
                        {
                            CategoryId = 11,
                            CategoryName = "Matematik"
                        },
                        new
                        {
                            CategoryId = 12,
                            CategoryName = "Biyografi"
                        },
                        new
                        {
                            CategoryId = 13,
                            CategoryName = "Felsefe"
                        },
                        new
                        {
                            CategoryId = 14,
                            CategoryName = "Edebiyat"
                        },
                        new
                        {
                            CategoryId = 15,
                            CategoryName = "Mimarlık"
                        },
                        new
                        {
                            CategoryId = 16,
                            CategoryName = "Psikoloji"
                        },
                        new
                        {
                            CategoryId = 17,
                            CategoryName = "Hikaye"
                        },
                        new
                        {
                            CategoryId = 18,
                            CategoryName = "Dergi"
                        },
                        new
                        {
                            CategoryId = 19,
                            CategoryName = "Yüksek Lisans"
                        },
                        new
                        {
                            CategoryId = 20,
                            CategoryName = "Drama"
                        },
                        new
                        {
                            CategoryId = 21,
                            CategoryName = "Komik"
                        });
                });

            modelBuilder.Entity("LMS.Entities.Models.ContentType", b =>
                {
                    b.Property<int>("ContentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentTypeId"), 1L, 1);

                    b.Property<string>("ContentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContentTypeId");

                    b.ToTable("ContentTypes");

                    b.HasData(
                        new
                        {
                            ContentTypeId = 1,
                            ContentName = "Kartografik Veri Kümesi"
                        },
                        new
                        {
                            ContentTypeId = 2,
                            ContentName = "Kartografik Görüntü"
                        },
                        new
                        {
                            ContentTypeId = 3,
                            ContentName = "Kartografik Hareketli Görüntü"
                        },
                        new
                        {
                            ContentTypeId = 4,
                            ContentName = "Kartografik Dokunsal Görüntü"
                        },
                        new
                        {
                            ContentTypeId = 5,
                            ContentName = "Kartografik Dokunsal Üç Boyutlu Form"
                        },
                        new
                        {
                            ContentTypeId = 6,
                            ContentName = "Kartografik Üç Boyutlu Form"
                        },
                        new
                        {
                            ContentTypeId = 7,
                            ContentName = "Bilgisayar Veri Kümesi"
                        },
                        new
                        {
                            ContentTypeId = 8,
                            ContentName = "Bilgisayar Programı"
                        },
                        new
                        {
                            ContentTypeId = 9,
                            ContentName = "Notasyonlu Hareket"
                        },
                        new
                        {
                            ContentTypeId = 10,
                            ContentName = "Notalı Müzik"
                        },
                        new
                        {
                            ContentTypeId = 11,
                            ContentName = "İcra Edilen Müzik"
                        },
                        new
                        {
                            ContentTypeId = 12,
                            ContentName = "Sesler"
                        },
                        new
                        {
                            ContentTypeId = 13,
                            ContentName = "Konuşulan Kelime"
                        },
                        new
                        {
                            ContentTypeId = 14,
                            ContentName = "Hareketsiz Görüntü"
                        },
                        new
                        {
                            ContentTypeId = 15,
                            ContentName = "Dokunsal Görüntü"
                        },
                        new
                        {
                            ContentTypeId = 16,
                            ContentName = "Dokunsal Notalı Hareket"
                        },
                        new
                        {
                            ContentTypeId = 17,
                            ContentName = "Dokunsal Metin"
                        },
                        new
                        {
                            ContentTypeId = 18,
                            ContentName = "Dokunsal Üç Boyutlu Form"
                        },
                        new
                        {
                            ContentTypeId = 19,
                            ContentName = "Metin"
                        },
                        new
                        {
                            ContentTypeId = 20,
                            ContentName = "Üç Boyutlu Form"
                        },
                        new
                        {
                            ContentTypeId = 21,
                            ContentName = "Üç Boyutlu Hareketli Görüntü"
                        },
                        new
                        {
                            ContentTypeId = 22,
                            ContentName = "İki Boyutlu Hareketli Görüntü"
                        },
                        new
                        {
                            ContentTypeId = 23,
                            ContentName = "Belirtilmemiş"
                        },
                        new
                        {
                            ContentTypeId = 24,
                            ContentName = "Diğer"
                        });
                });

            modelBuilder.Entity("LMS.Entities.Models.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictId"), 1L, 1);

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("LMS.Entities.Models.Fine", b =>
                {
                    b.Property<int>("FineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FineId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("FineId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Fines");
                });

            modelBuilder.Entity("LMS.Entities.Models.Format", b =>
                {
                    b.Property<int>("FormatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormatId"), 1L, 1);

                    b.Property<string>("FormatName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormatId");

                    b.ToTable("Formats");

                    b.HasData(
                        new
                        {
                            FormatId = 1,
                            FormatName = "Kitaplar"
                        },
                        new
                        {
                            FormatId = 2,
                            FormatName = "Kağıt Kapaklı Olan Kitaplar"
                        },
                        new
                        {
                            FormatId = 3,
                            FormatName = "Büyük Basılı"
                        },
                        new
                        {
                            FormatId = 4,
                            FormatName = "Junior Basılı Materyal"
                        },
                        new
                        {
                            FormatId = 5,
                            FormatName = "CD'li Çocuk Kitabı"
                        },
                        new
                        {
                            FormatId = 6,
                            FormatName = "Grafik Romanlar"
                        },
                        new
                        {
                            FormatId = 7,
                            FormatName = "Dergiler"
                        },
                        new
                        {
                            FormatId = 8,
                            FormatName = "e-Kitaplar"
                        },
                        new
                        {
                            FormatId = 9,
                            FormatName = "CD'deki Sesli Kitaplar"
                        },
                        new
                        {
                            FormatId = 10,
                            FormatName = "e-Sesli Kitaplar"
                        },
                        new
                        {
                            FormatId = 11,
                            FormatName = "Müzik CD'si"
                        },
                        new
                        {
                            FormatId = 12,
                            FormatName = "DVD"
                        },
                        new
                        {
                            FormatId = 13,
                            FormatName = "Video Oyunları"
                        });
                });

            modelBuilder.Entity("LMS.Entities.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            Name = "Türkçe"
                        },
                        new
                        {
                            LanguageId = 2,
                            Name = "İngilizce"
                        },
                        new
                        {
                            LanguageId = 3,
                            Name = "Osmanlıca"
                        },
                        new
                        {
                            LanguageId = 4,
                            Name = "Almanca"
                        },
                        new
                        {
                            LanguageId = 5,
                            Name = "İtalyanca"
                        },
                        new
                        {
                            LanguageId = 6,
                            Name = "Arapça"
                        },
                        new
                        {
                            LanguageId = 7,
                            Name = "Yunanca"
                        },
                        new
                        {
                            LanguageId = 8,
                            Name = "Latince"
                        },
                        new
                        {
                            LanguageId = 9,
                            Name = "Korece"
                        },
                        new
                        {
                            LanguageId = 10,
                            Name = "Farsça"
                        },
                        new
                        {
                            LanguageId = 11,
                            Name = "Rusça"
                        },
                        new
                        {
                            LanguageId = 12,
                            Name = "İspanyolca"
                        },
                        new
                        {
                            LanguageId = 13,
                            Name = "Çince"
                        },
                        new
                        {
                            LanguageId = 14,
                            Name = "Fransızca"
                        },
                        new
                        {
                            LanguageId = 15,
                            Name = "İbranice"
                        },
                        new
                        {
                            LanguageId = 16,
                            Name = "Polca/Lehçe"
                        },
                        new
                        {
                            LanguageId = 17,
                            Name = "Ermenice"
                        },
                        new
                        {
                            LanguageId = 18,
                            Name = "Boşnakça"
                        },
                        new
                        {
                            LanguageId = 19,
                            Name = "Kazakça"
                        });
                });

            modelBuilder.Entity("LMS.Entities.Models.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOrder")
                        .HasColumnType("bit");

                    b.Property<string>("LastReturnDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoanDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReturnedDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoanId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BookId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("LMS.Entities.Models.MediaType", b =>
                {
                    b.Property<int>("MediaTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaTypeId"), 1L, 1);

                    b.Property<string>("MediaName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaTypeId");

                    b.ToTable("MediaTypes");

                    b.HasData(
                        new
                        {
                            MediaTypeId = 1,
                            MediaName = "Ses"
                        },
                        new
                        {
                            MediaTypeId = 2,
                            MediaName = "Bilgisayar"
                        },
                        new
                        {
                            MediaTypeId = 3,
                            MediaName = "Mikrofilm"
                        },
                        new
                        {
                            MediaTypeId = 4,
                            MediaName = "Mikroskop"
                        },
                        new
                        {
                            MediaTypeId = 5,
                            MediaName = "Projeksiyon"
                        },
                        new
                        {
                            MediaTypeId = 6,
                            MediaName = "Stereografik"
                        },
                        new
                        {
                            MediaTypeId = 7,
                            MediaName = "Aracısız"
                        },
                        new
                        {
                            MediaTypeId = 8,
                            MediaName = "Video"
                        },
                        new
                        {
                            MediaTypeId = 9,
                            MediaName = "Belirtilmemiş"
                        });
                });

            modelBuilder.Entity("LMS.Entities.Models.NonOrder", b =>
                {
                    b.Property<int>("NonOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NonOrderId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeliver")
                        .HasColumnType("bit");

                    b.Property<int>("LoanId")
                        .HasColumnType("int");

                    b.HasKey("NonOrderId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("LoanId");

                    b.ToTable("NonOrders");
                });

            modelBuilder.Entity("LMS.Entities.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeliver")
                        .HasColumnType("bit");

                    b.Property<int>("LoanId")
                        .HasColumnType("int");

                    b.Property<string>("OrderNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("LoanId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("LMS.Entities.Models.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("LMS.Entities.Models.Receive", b =>
                {
                    b.Property<int>("ReceiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiveId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LoanId")
                        .HasColumnType("int");

                    b.HasKey("ReceiveId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("LoanId");

                    b.ToTable("Receives");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9406198d-c5d8-48ed-96b2-751ae281fa4e",
                            ConcurrencyStamp = "4a1aeb13-f813-40bf-b29c-5962e9f5add6",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "caf3d7b5-3a96-4206-9b7b-3937734b5f9d",
                            ConcurrencyStamp = "ecd61707-9ae8-401a-ab11-8acdb347c90a",
                            Name = "Kargo",
                            NormalizedName = "KARGO"
                        },
                        new
                        {
                            Id = "a5d2b280-fb72-44ca-b61e-4561d4cc5f52",
                            ConcurrencyStamp = "3569baa3-7dc0-4ab7-951b-d99e36314f1a",
                            Name = "Personel",
                            NormalizedName = "PERSONEL"
                        },
                        new
                        {
                            Id = "1517d400-18cb-4a61-b2f8-b478ecea745d",
                            ConcurrencyStamp = "0f312fc2-f92b-4654-b89d-822dd267b6f2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LMS.Entities.Models.Book", b =>
                {
                    b.HasOne("LMS.Entities.Models.CarrierType", null)
                        .WithMany("Books")
                        .HasForeignKey("CarrierTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Entities.Models.Category", null)
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Entities.Models.ContentType", null)
                        .WithMany("Books")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Entities.Models.Format", null)
                        .WithMany("Books")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Entities.Models.Language", null)
                        .WithMany("Books")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Entities.Models.BookAuthor", b =>
                {
                    b.HasOne("LMS.Entities.Models.Author", null)
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Entities.Models.Book", null)
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Entities.Models.BookingOffice", b =>
                {
                    b.HasOne("LMS.Entities.Models.ApplicationUser", null)
                        .WithMany("BookingOffices")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("LMS.Entities.Models.CarrierType", b =>
                {
                    b.HasOne("LMS.Entities.Models.MediaType", null)
                        .WithMany("CarrierTypes")
                        .HasForeignKey("MediaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Entities.Models.District", b =>
                {
                    b.HasOne("LMS.Entities.Models.Province", null)
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Entities.Models.Fine", b =>
                {
                    b.HasOne("LMS.Entities.Models.ApplicationUser", null)
                        .WithMany("Fine")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("LMS.Entities.Models.Loan", b =>
                {
                    b.HasOne("LMS.Entities.Models.ApplicationUser", null)
                        .WithMany("Loans")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("LMS.Entities.Models.Book", null)
                        .WithMany("Loans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Entities.Models.NonOrder", b =>
                {
                    b.HasOne("LMS.Entities.Models.ApplicationUser", null)
                        .WithMany("NonOrders")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("LMS.Entities.Models.Loan", null)
                        .WithMany("NonOrders")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Entities.Models.Order", b =>
                {
                    b.HasOne("LMS.Entities.Models.ApplicationUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("LMS.Entities.Models.District", null)
                        .WithMany("Orders")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Entities.Models.Loan", null)
                        .WithMany("Orders")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Entities.Models.Receive", b =>
                {
                    b.HasOne("LMS.Entities.Models.ApplicationUser", null)
                        .WithMany("Receives")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("LMS.Entities.Models.Loan", null)
                        .WithMany("Receives")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LMS.Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LMS.Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LMS.Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.Entities.Models.ApplicationUser", b =>
                {
                    b.Navigation("BookingOffices");

                    b.Navigation("Fine");

                    b.Navigation("Loans");

                    b.Navigation("NonOrders");

                    b.Navigation("Orders");

                    b.Navigation("Receives");
                });

            modelBuilder.Entity("LMS.Entities.Models.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("LMS.Entities.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("Loans");
                });

            modelBuilder.Entity("LMS.Entities.Models.CarrierType", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LMS.Entities.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LMS.Entities.Models.ContentType", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LMS.Entities.Models.District", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("LMS.Entities.Models.Format", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LMS.Entities.Models.Language", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LMS.Entities.Models.Loan", b =>
                {
                    b.Navigation("NonOrders");

                    b.Navigation("Orders");

                    b.Navigation("Receives");
                });

            modelBuilder.Entity("LMS.Entities.Models.MediaType", b =>
                {
                    b.Navigation("CarrierTypes");
                });

            modelBuilder.Entity("LMS.Entities.Models.Province", b =>
                {
                    b.Navigation("Districts");
                });
#pragma warning restore 612, 618
        }
    }
}
